# Техническое задание: Перенос Snakemake пайплайна на Python

## Цель
Реализовать Python-версию существующего Snakemake пайплайна (post_processing_rc.snakefile), сохранив текущую логику выполнения и существующие скрипты.

## Ограничения и принципы
1. Существующие скрипты (Python, Perl и др.) не модифицируются, а используются через subprocess
2. Конфигурация LSF переносится как есть из текущего профиля snakemake
3. Интеграция с Jira сохраняется через существующие Python модули
4. Приоритет отдается использованию существующего кода где это возможно

## Этапы реализации

### Этап 1: Анализ и подготовка
1. Анализ post_processing_rc.snakefile:
   - Выделить все правила (rules)
   - Определить зависимости между правилами
   - Составить граф выполнения задач
   - Определить параметры запуска каждого правила

2. Подготовка базовой структуры проекта:
   - Проверка текущей структуры пайплайна в папке pipeline
   - Копирование необходимых скриптов в pipeline/scripts/
   - Создание пустых файлов для основных модулей

### Этап 2: Базовая реализация
1. Реализация config_loader.py:
   - Чтение YAML конфигураций
   - Валидация обязательных параметров
   - Объединение параметров из разных источников

2. Реализация job_manager.py:
   - Класс для работы с LSF
   - Методы submit_job(), check_status()
   - Обработка выходных данных LSF

3. Реализация workflow.py:
   - Класс Task для представления отдельной задачи
   - Класс Workflow для управления зависимостями
   - Методы добавления задач и проверки зависимостей

4. Реализация pipeline.py:
   - Парсинг аргументов командной строки
   - Инициализация компонентов
   - Основной цикл выполнения

### Этап 3: Тестирование и отладка
1. Написание базовых тестов:
   - Тесты для config_loader.py
   - Тесты для job_manager.py
   - Тесты для workflow.py

2. Интеграционное тестирование:
   - Тест запуска одиночной задачи
   - Тест цепочки зависимых задач
   - Тест обработки ошибок

### Этап 4: Документация и инструкции
1. Создание README.md:
   - Описание установки
   - Базовые примеры использования
   - Описание конфигурационных файлов

2. Документация для разработчиков:
   - Описание архитектуры
   - Примеры добавления новых задач
   - Описание системы логирования

## Требования к реализации

### Технические требования
1. Python 3.8+
2. Запуск существующих скриптов через subprocess
3. Логирование в JSON/txt формате
4. Поддержка тех же параметров командной строки, что и в Snakemake версии

### Функциональные требования
1. Воспроизведение логики post_processing_rc.snakefile
2. Сохранение существующего процесса работы с LSF
3. Корректная обработка ошибок и перезапуск задач
4. Поддержка параллельного выполнения задач

### Тестирование
1. Unit-тесты для каждого основного модуля
2. Интеграционные тесты для типовых сценариев
3. Проверка на небольшом наборе реальных данных

## Результат
Работающий Python-пайплайн, повторяющий функциональность post_processing_rc.snakefile, с сохранением всех существующих скриптов и процессов.